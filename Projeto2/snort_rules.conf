#snort -Q --daq nfq --daq-var queue=0 -c /home/dcaetano/STI/Snort/snort.cfg -v -l /home/dcaetano/STI/snort_log/


############ATAQUES de DOS
#testar com: 
#hping3 10.254.0.1 -p 80 -S -c 500  -i u1000		SYN FLOOD		(intervalos de 1 milisegundo)
#ping 	10.254.0.1 			-c 1000 -i 0.000001 	PING OF DEATH	(intervalos de 1 microsegundo, todos os pings ja bloqueados pela iptables, nem chega ao snort)

DROP tcp any any -> any any (msg:"DROP: ataque SYN FLOOD detetado e dropado"; flags:S; detection_filter: track by_src, count 15, seconds 1; sid:1;)



############ATAQUES de SQL INJECTION			NOTA: num caso real nunca se usaria o port 80, mas sim um adequado ao uso de DataBases, so usado para facilitar os testes
#testar com: 
#alvo: 		NADA
#atacante: 	python sqlmap.py -u http://10.254.0.1:80 --dbms=mysql     
#send(IP(dst="10.254.0.1")/TCP(dport=80)/Raw(load="SELECT * FROM Users WHERE UserId = 105 OR 1=1; "))				(always TRUE) 

DROP tcp any any -> any any (msg:"Possible SQL injection attack por sempre TRUE"; pcre:"/([a-z0-9]+)=\1/i"; sid:2;)       





############Tentativa de OS FINGERPRINTING
#testar com:
#nmap -O 10.254.0.1									impedido pelas regra sid:1, que impede o envio de pedidos em massa


#se receber demasiado ACK do client no server
#DROP  tcp any any -> any any (msg:"DROP: OS fingerprinting por ACK"; 					flags: A; detection_filter: track by_src, count 5, seconds 10; sid:2;)






